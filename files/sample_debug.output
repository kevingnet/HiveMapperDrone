Using input file./DroneNavigator.world
Using algorithm dijkstra
PARSING INPUT FILE...
CIRCLE[name:A radius:2500 intersections:3]
CIRCLE[name:B radius:1000 intersections:3]
CIRCLE[name:C radius:1000 intersections:3]
CIRCLE[name:D radius:3500 intersections:4]
CIRCLE[name:E radius:4500 intersections:3]
INTERSECTION[A:0xB:180]
INTERSECTION[A:0xD:0]
INTERSECTION[A:180xC:0]
INTERSECTION[B:0xE:0]
INTERSECTION[B:180xA:0]
INTERSECTION[B:180xD:0]
INTERSECTION[C:0xA:180]
INTERSECTION[C:180xD:180]
INTERSECTION[C:180xE:180]
INTERSECTION[D:0xA:0]
INTERSECTION[D:0xB:180]
INTERSECTION[D:180xC:180]
INTERSECTION[D:180xE:180]
INTERSECTION[E:0xB:0]
INTERSECTION[E:180xC:180]
INTERSECTION[E:180xD:180]
ROUTE[origin:A angle:355 direction:0 destination:B angle:0]

BUILDING GRAPH ELEMENTS...
ADDING VERTICES
	A0
	B180
	D0
	A180
	C0
	B0
	E0
	C180
	D180
	E180
Found: 10 vertices

ADDING EDGES
	Displacement Edges
	A0<->A180		distance 180 segmentSize 43 weight 7740
	B0<->B180		distance 180 segmentSize 17 weight 3060
	C0<->C180		distance 180 segmentSize 17 weight 3060
	D0<->D180		distance 180 segmentSize 61 weight 10980
	E0<->E180		distance 180 segmentSize 78 weight 14040
	intersection Edges
	A0<->B180
	A0<->D0
	A180<->C0
	B0<->E0
	B180<->A0
	B180<->D0
	C0<->A180
	C180<->D180
	C180<->E180
	D0<->A0
	D0<->B180
	D180<->C180
	D180<->E180
	E0<->B0
	E180<->C180
	E180<->D180
Found: 21 edges

Calculating route using 'Dijkstra2' algorithm for: 
ROUTE[origin:A angle:355 direction:0 destination:B angle:0]

0 <--> 3 3 1 2 1 2 
1 <--> 5 5 0 0 2 2 
2 <--> 8 8 0 1 0 1 
3 <--> 0 0 4 4 
4 <--> 7 7 3 3 
5 <--> 1 1 6 6 
6 <--> 9 9 5 5 
7 <--> 4 4 8 9 8 9 
8 <--> 2 2 7 7 9 9 
9 <--> 6 6 7 8 7 8 

distances and parents:
distance(A180, A0) = 7740, predecessor(A0) = A180
distance(A180, B180) = 7740, predecessor(B180) = A0
distance(A180, D0) = 7740, predecessor(D0) = A0
distance(A180, A180) = 0, predecessor(A180) = A180
distance(A180, C0) = 0, predecessor(C0) = A180
distance(A180, B0) = 10800, predecessor(B0) = B180
distance(A180, E0) = 10800, predecessor(E0) = B0
distance(A180, C180) = 3060, predecessor(C180) = C0
distance(A180, D180) = 3060, predecessor(D180) = C180
distance(A180, E180) = 3060, predecessor(E180) = C180

Shortest path from vS to vD:
A180 -> A0 @ 7740
A0 -> B180 @ 0
B180 -> B0 @ 3060

			step: 0
A355->A0 GO: 53.8  CW
COMMAND: 
GO (53.8)

			step: 1
A0->B180 REVERSE CW->CCW
COMMAND: 
TRANSFER B (0.1)

			step: 2
B180->B0 GO: 765.0  CCW
COMMAND: 
GO (765.0)


STEPS: 
Step Displacement[A:355 -> A:0 weight:215]
Step Intersection[A:0 -> B:180]
Step Displacement[B:180 -> B:0 weight:3060]

ROUTE: Start: + A355 -> B0

RESULT:
818.9

GO (53.8)

TRANSFER B (0.1)

GO (765.0)


